{"version":3,"sources":["../src/transformers.js"],"names":["transformDataToTable","data","panel","model","TableModel","length","transformer","transformers","transform","message","_","flatten","TimeSeries","mergeTablesIntoModel","description","getColumns","columns","text","type","i","series","y","datapoints","dp","rows","push","target","points","timeKey","toString","time","point","values","value","alias","getFlotPairs","cells","stats","annotations","evt","title","tags","columnNames","reduce","acc","forEach","col","undefined","noTableIndex","findIndex","d","String","fromCharCode","names","maxDocs","Math","min","doc","flattened","propName","map","key","z","column","tableCol","filterable","isObject","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;AAqPA,WAASA,oBAAT,CAA8BC,IAA9B,EAAoCC,KAApC,EAA2C;AACzC,QAAMC,QAAQ,IAAIC,UAAJ,EAAd;;AAEA,QAAI,CAACH,IAAD,IAASA,KAAKI,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,aAAOF,KAAP;AACD;;AAED,QAAMG,cAAcC,aAAaL,MAAMM,SAAnB,CAApB;AACA,QAAI,CAACF,WAAL,EAAkB;AAChB,YAAM,EAAEG,SAAS,iBAAiBP,MAAMM,SAAvB,GAAmC,YAA9C,EAAN;AACD;;AAEDF,gBAAYE,SAAZ,CAAsBP,IAAtB,EAA4BC,KAA5B,EAAmCC,KAAnC;AACA,WAAOA,KAAP;AACD;;;;AAnQMO,O;;AACAC,a;;AACAC,gB;;AACAR,gB;AAAcS,0B,uBAAAA,oB;;;8BAEfN,Y,GAAe,E;;AAErBA,mBAAa,oBAAb,IAAqC;AACnCO,qBAAa,qBADsB;AAEnCC,oBAAY,sBAAM;AAChB,iBAAO,EAAP;AACD,SAJkC;AAKnCP,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjCA,gBAAMa,OAAN,GAAgB,CAAC,EAAEC,MAAM,MAAR,EAAgBC,MAAM,MAAtB,EAAD,EAAiC,EAAED,MAAM,QAAR,EAAjC,EAAqD,EAAEA,MAAM,OAAR,EAArD,CAAhB;;AAEA,eAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIlB,KAAKI,MAAzB,EAAiCc,GAAjC,EAAsC;AACpC,gBAAMC,SAASnB,KAAKkB,CAAL,CAAf;AACA,iBAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAID,OAAOE,UAAP,CAAkBjB,MAAtC,EAA8CgB,GAA9C,EAAmD;AACjD,kBAAME,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAX;AACAlB,oBAAMqB,IAAN,CAAWC,IAAX,CAAgB,CAACF,GAAG,CAAH,CAAD,EAAQH,OAAOM,MAAf,EAAuBH,GAAG,CAAH,CAAvB,CAAhB;AACD;AACF;AACF;AAfkC,OAArC;;AAkBAhB,mBAAa,uBAAb,IAAwC;AACtCO,qBAAa,wBADyB;AAEtCC,oBAAY,sBAAM;AAChB,iBAAO,EAAP;AACD,SAJqC;AAKtCP,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjCA,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,MAAR,EAAgBC,MAAM,MAAtB,EAAnB;;AAEA;AACA,cAAMS,SAAS,EAAf;;AAEA,eAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIlB,KAAKI,MAAzB,EAAiCc,GAAjC,EAAsC;AACpC,gBAAMC,SAASnB,KAAKkB,CAAL,CAAf;AACAhB,kBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAMG,OAAOM,MAAf,EAAnB;;AAEA,iBAAK,IAAIL,IAAI,CAAb,EAAgBA,IAAID,OAAOE,UAAP,CAAkBjB,MAAtC,EAA8CgB,GAA9C,EAAmD;AACjD,kBAAME,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAX;AACA,kBAAMO,UAAUL,GAAG,CAAH,EAAMM,QAAN,EAAhB;;AAEA,kBAAI,CAACF,OAAOC,OAAP,CAAL,EAAsB;AACpBD,uBAAOC,OAAP,IAAkB,EAAEE,MAAMP,GAAG,CAAH,CAAR,EAAlB;AACAI,uBAAOC,OAAP,EAAgBT,CAAhB,IAAqBI,GAAG,CAAH,CAArB;AACD,eAHD,MAGO;AACLI,uBAAOC,OAAP,EAAgBT,CAAhB,IAAqBI,GAAG,CAAH,CAArB;AACD;AACF;AACF;;AAED,eAAK,IAAMO,IAAX,IAAmBH,MAAnB,EAA2B;AACzB,gBAAMI,QAAQJ,OAAOG,IAAP,CAAd;AACA,gBAAME,SAAS,CAACD,MAAMD,IAAP,CAAf;;AAEA,iBAAK,IAAIX,KAAI,CAAb,EAAgBA,KAAIlB,KAAKI,MAAzB,EAAiCc,IAAjC,EAAsC;AACpC,kBAAMc,QAAQF,MAAMZ,EAAN,CAAd;AACAa,qBAAOP,IAAP,CAAYQ,KAAZ;AACD;;AAED9B,kBAAMqB,IAAN,CAAWC,IAAX,CAAgBO,MAAhB;AACD;AACF;AAvCqC,OAAxC;;AA0CAzB,mBAAa,yBAAb,IAA0C;AACxCO,qBAAa,0BAD2B;AAExCC,oBAAY,sBAAM;AAChB,iBAAO,CACL,EAAEE,MAAM,KAAR,EAAegB,OAAO,KAAtB,EADK,EAEL,EAAEhB,MAAM,KAAR,EAAegB,OAAO,KAAtB,EAFK,EAGL,EAAEhB,MAAM,KAAR,EAAegB,OAAO,KAAtB,EAHK,EAIL,EAAEhB,MAAM,OAAR,EAAiBgB,OAAO,OAAxB,EAJK,EAKL,EAAEhB,MAAM,SAAR,EAAmBgB,OAAO,SAA1B,EALK,EAML,EAAEhB,MAAM,OAAR,EAAiBgB,OAAO,OAAxB,EANK,CAAP;AAQD,SAXuC;AAYxCzB,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjC,cAAIgB,UAAJ;AAAA,cAAOE,UAAP;AACAlB,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,QAAR,EAAnB;;AAEA,eAAKE,IAAI,CAAT,EAAYA,IAAIjB,MAAMc,OAAN,CAAcX,MAA9B,EAAsCc,GAAtC,EAA2C;AACzChB,kBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAMf,MAAMc,OAAN,CAAcG,CAAd,EAAiBF,IAAzB,EAAnB;AACD;;AAED,eAAKE,IAAI,CAAT,EAAYA,IAAIlB,KAAKI,MAArB,EAA6Bc,GAA7B,EAAkC;AAChC,gBAAMC,SAAS,IAAIR,UAAJ,CAAe;AAC5BU,0BAAYrB,KAAKkB,CAAL,EAAQG,UADQ;AAE5BY,qBAAOjC,KAAKkB,CAAL,EAAQO;AAFa,aAAf,CAAf;;AAKAN,mBAAOe,YAAP,CAAoB,WAApB;AACA,gBAAMC,QAAQ,CAAChB,OAAOc,KAAR,CAAd;;AAEA,iBAAKb,IAAI,CAAT,EAAYA,IAAInB,MAAMc,OAAN,CAAcX,MAA9B,EAAsCgB,GAAtC,EAA2C;AACzCe,oBAAMX,IAAN,CAAWL,OAAOiB,KAAP,CAAanC,MAAMc,OAAN,CAAcK,CAAd,EAAiBY,KAA9B,CAAX;AACD;;AAED9B,kBAAMqB,IAAN,CAAWC,IAAX,CAAgBW,KAAhB;AACD;AACF;AAnCuC,OAA1C;;AAsCA7B,mBAAa,aAAb,IAA8B;AAC5BO,qBAAa,aADe;AAE5BC,oBAAY,sBAAM;AAChB,iBAAO,EAAP;AACD,SAJ2B;AAK5BP,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjCA,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,MAAR,EAAgBC,MAAM,MAAtB,EAAnB;AACAf,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,OAAR,EAAnB;AACAd,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,MAAR,EAAnB;AACAd,gBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,MAAR,EAAnB;;AAEA,cAAI,CAAChB,IAAD,IAAS,CAACA,KAAKqC,WAAf,IAA8BrC,KAAKqC,WAAL,CAAiBjC,MAAjB,KAA4B,CAA9D,EAAiE;AAC/D;AACD;;AAED,eAAK,IAAIc,IAAI,CAAb,EAAgBA,IAAIlB,KAAKqC,WAAL,CAAiBjC,MAArC,EAA6Cc,GAA7C,EAAkD;AAChD,gBAAMoB,MAAMtC,KAAKqC,WAAL,CAAiBnB,CAAjB,CAAZ;AACAhB,kBAAMqB,IAAN,CAAWC,IAAX,CAAgB,CAACc,IAAIT,IAAL,EAAWS,IAAIC,KAAf,EAAsBD,IAAItB,IAA1B,EAAgCsB,IAAIE,IAApC,CAAhB;AACD;AACF;AAnB2B,OAA9B;;AAsBAlC,mBAAa,OAAb,IAAwB;AACtBO,qBAAa,OADS;AAEtBC,oBAAY,0BAAQ;AAClB,cAAI,CAACd,IAAD,IAASA,KAAKI,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,mBAAO,EAAP;AACD;AACD;AACA,cAAIJ,KAAKI,MAAL,KAAgB,CAApB,EAAuB;AACrB,gDAAWJ,KAAK,CAAL,EAAQe,OAAnB;AACD;;AAED;AACA,cAAM0B,cAAc,EAApB;;AAEA;AACA,cAAM1B,UAAUf,KAAK0C,MAAL,CAAY,UAACC,GAAD,EAAMxB,MAAN,EAAiB;AAC3CA,mBAAOJ,OAAP,CAAe6B,OAAf,CAAuB,eAAO;AAAA,kBACpB5B,IADoB,GACX6B,GADW,CACpB7B,IADoB;;AAE5B,kBAAIyB,YAAYzB,IAAZ,MAAsB8B,SAA1B,EAAqC;AACnCL,4BAAYzB,IAAZ,IAAoB2B,IAAIvC,MAAxB;AACAuC,oBAAInB,IAAJ,CAASqB,GAAT;AACD;AACF,aAND;AAOA,mBAAOF,GAAP;AACD,WATe,EASb,EATa,CAAhB;;AAWA,iBAAO5B,OAAP;AACD,SA3BqB;AA4BtBR,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjC,cAAI,CAACF,IAAD,IAASA,KAAKI,MAAL,KAAgB,CAA7B,EAAgC;AAC9B;AACD;;AAED,cAAM2C,eAAetC,EAAEuC,SAAF,CAAYhD,IAAZ,EAAkB;AAAA,mBAAKiD,EAAEhC,IAAF,KAAW,OAAhB;AAAA,WAAlB,CAArB;AACA,cAAI8B,eAAe,CAAC,CAApB,EAAuB;AACrB,kBAAM;AACJvC,6CAA6B0C,OAAOC,YAAP,CAC3B,KAAKJ,YADsB,CAA7B;AADI,aAAN;AAKD;;AAED;;AAEA7C,gBAAMa,OAAN,GAAgBf,KAAK,CAAL,EAAQe,OAAxB;AACAb,gBAAMqB,IAAN,GAAavB,KAAK,CAAL,EAAQuB,IAArB;AACD;AA9CqB,OAAxB;;AAiDAjB,mBAAa,MAAb,IAAuB;AACrBO,qBAAa,WADQ;AAErBC,oBAAY,0BAAQ;AAClB,cAAI,CAACd,IAAD,IAASA,KAAKI,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,mBAAO,EAAP;AACD;;AAED,cAAMgD,QAAQ,EAAd;AACA,eAAK,IAAIlC,IAAI,CAAb,EAAgBA,IAAIlB,KAAKI,MAAzB,EAAiCc,GAAjC,EAAsC;AACpC,gBAAMC,SAASnB,KAAKkB,CAAL,CAAf;AACA,gBAAIC,OAAOF,IAAP,KAAgB,MAApB,EAA4B;AAC1B;AACD;;AAED;AACA,gBAAMoC,UAAUC,KAAKC,GAAL,CAASpC,OAAOE,UAAP,CAAkBjB,MAA3B,EAAmC,GAAnC,CAAhB;AACA,iBAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIiC,OAApB,EAA6BjC,GAA7B,EAAkC;AAChC,kBAAMoC,MAAMrC,OAAOE,UAAP,CAAkBD,CAAlB,CAAZ;AACA,kBAAMqC,YAAY/C,QAAQ8C,GAAR,EAAa,IAAb,CAAlB;AACA,mBAAK,IAAME,QAAX,IAAuBD,SAAvB,EAAkC;AAChCL,sBAAMM,QAAN,IAAkB,IAAlB;AACD;AACF;AACF;;AAED,iBAAOjD,EAAEkD,GAAF,CAAMP,KAAN,EAAa,UAACpB,KAAD,EAAQ4B,GAAR,EAAgB;AAClC,mBAAO,EAAE5C,MAAM4C,GAAR,EAAa5B,OAAO4B,GAApB,EAAP;AACD,WAFM,CAAP;AAGD,SA5BoB;AA6BrBrD,mBAAW,mBAACP,IAAD,EAAOC,KAAP,EAAcC,KAAd,EAAwB;AACjC,cAAIgB,UAAJ;AAAA,cAAOE,UAAP;AAAA,cAAUyC,UAAV;;AADiC;AAAA;AAAA;;AAAA;AAGjC,iCAAqB5D,MAAMc,OAA3B,8HAAoC;AAAA,kBAAzB+C,MAAyB;;AAClC,kBAAMC,WAAW,EAAE/C,MAAM8C,OAAO9C,IAAf,EAAjB;;AAEA;AACA,kBAAIhB,KAAKI,MAAL,GAAc,CAAd,IAAmBJ,KAAK,CAAL,EAAQgE,UAA/B,EAA2C;AACzCD,yBAASC,UAAT,GAAsB,IAAtB;AACD;;AAED9D,oBAAMa,OAAN,CAAcS,IAAd,CAAmBuC,QAAnB;AACD;AAZgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcjC,cAAI7D,MAAMa,OAAN,CAAcX,MAAd,KAAyB,CAA7B,EAAgC;AAC9BF,kBAAMa,OAAN,CAAcS,IAAd,CAAmB,EAAER,MAAM,MAAR,EAAnB;AACD;;AAED,eAAKE,IAAI,CAAT,EAAYA,IAAIlB,KAAKI,MAArB,EAA6Bc,GAA7B,EAAkC;AAChC,gBAAMC,SAASnB,KAAKkB,CAAL,CAAf;;AAEA,iBAAKE,IAAI,CAAT,EAAYA,IAAID,OAAOE,UAAP,CAAkBjB,MAAlC,EAA0CgB,GAA1C,EAA+C;AAC7C,kBAAME,KAAKH,OAAOE,UAAP,CAAkBD,CAAlB,CAAX;AACA,kBAAMW,SAAS,EAAf;;AAEA,kBAAItB,EAAEwD,QAAF,CAAW3C,EAAX,KAAkBrB,MAAMc,OAAN,CAAcX,MAAd,GAAuB,CAA7C,EAAgD;AAC9C,oBAAMqD,YAAY/C,QAAQY,EAAR,EAAY,IAAZ,CAAlB;AACA,qBAAKuC,IAAI,CAAT,EAAYA,IAAI5D,MAAMc,OAAN,CAAcX,MAA9B,EAAsCyD,GAAtC,EAA2C;AACzC9B,yBAAOP,IAAP,CAAYiC,UAAUxD,MAAMc,OAAN,CAAc8C,CAAd,EAAiB7B,KAA3B,CAAZ;AACD;AACF,eALD,MAKO;AACLD,uBAAOP,IAAP,CAAY0C,KAAKC,SAAL,CAAe7C,EAAf,CAAZ;AACD;;AAEDpB,oBAAMqB,IAAN,CAAWC,IAAX,CAAgBO,MAAhB;AACD;AACF;AACF;AAlEoB,OAAvB;8BAqFSzB,Y;;sCAAcP,oB","file":"transformers.js","sourcesContent":["import _ from 'lodash';\nimport flatten from 'app/core/utils/flatten';\nimport TimeSeries from 'app/core/time_series2';\nimport TableModel, { mergeTablesIntoModel } from 'app/core/table_model';\n\nconst transformers = {};\n\ntransformers['timeseries_to_rows'] = {\n  description: 'Time series to rows',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        model.rows.push([dp[1], series.target, dp[0]]);\n      }\n    }\n  },\n};\n\ntransformers['timeseries_to_columns'] = {\n  description: 'Time series to columns',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n\n    // group by time\n    const points = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      model.columns.push({ text: series.target });\n\n      for (let y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const timeKey = dp[1].toString();\n\n        if (!points[timeKey]) {\n          points[timeKey] = { time: dp[1] };\n          points[timeKey][i] = dp[0];\n        } else {\n          points[timeKey][i] = dp[0];\n        }\n      }\n    }\n\n    for (const time in points) {\n      const point = points[time];\n      const values = [point.time];\n\n      for (let i = 0; i < data.length; i++) {\n        const value = point[i];\n        values.push(value);\n      }\n\n      model.rows.push(values);\n    }\n  },\n};\n\ntransformers['timeseries_aggregations'] = {\n  description: 'Time series aggregations',\n  getColumns: () => {\n    return [\n      { text: 'Avg', value: 'avg' },\n      { text: 'Min', value: 'min' },\n      { text: 'Max', value: 'max' },\n      { text: 'Total', value: 'total' },\n      { text: 'Current', value: 'current' },\n      { text: 'Count', value: 'count' },\n    ];\n  },\n  transform: (data, panel, model) => {\n    let i, y;\n    model.columns.push({ text: 'Metric' });\n\n    for (i = 0; i < panel.columns.length; i++) {\n      model.columns.push({ text: panel.columns[i].text });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = new TimeSeries({\n        datapoints: data[i].datapoints,\n        alias: data[i].target,\n      });\n\n      series.getFlotPairs('connected');\n      const cells = [series.alias];\n\n      for (y = 0; y < panel.columns.length; y++) {\n        cells.push(series.stats[panel.columns[y].value]);\n      }\n\n      model.rows.push(cells);\n    }\n  },\n};\n\ntransformers['annotations'] = {\n  description: 'Annotations',\n  getColumns: () => {\n    return [];\n  },\n  transform: (data, panel, model) => {\n    model.columns.push({ text: 'Time', type: 'date' });\n    model.columns.push({ text: 'Title' });\n    model.columns.push({ text: 'Text' });\n    model.columns.push({ text: 'Tags' });\n\n    if (!data || !data.annotations || data.annotations.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < data.annotations.length; i++) {\n      const evt = data.annotations[i];\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\n    }\n  },\n};\n\ntransformers['table'] = {\n  description: 'Table',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n    // Single query returns data columns as is\n    if (data.length === 1) {\n      return [...data[0].columns];\n    }\n\n    // Track column indexes: name -> index\n    const columnNames = {};\n\n    // Union of all columns\n    const columns = data.reduce((acc, series) => {\n      series.columns.forEach(col => {\n        const { text } = col;\n        if (columnNames[text] === undefined) {\n          columnNames[text] = acc.length;\n          acc.push(col);\n        }\n      });\n      return acc;\n    }, []);\n\n    return columns;\n  },\n  transform: (data, panel, model) => {\n    if (!data || data.length === 0) {\n      return;\n    }\n\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table');\n    if (noTableIndex > -1) {\n      throw {\n        message: `Result of query #${String.fromCharCode(\n          65 + noTableIndex\n        )} is not in table format, try using another transform.`,\n      };\n    }\n\n    // mergeTablesIntoModel(model, ...data);\n    \n    model.columns = data[0].columns;\n    model.rows = data[0].rows;\n  },\n};\n\ntransformers['json'] = {\n  description: 'JSON Data',\n  getColumns: data => {\n    if (!data || data.length === 0) {\n      return [];\n    }\n\n    const names = {};\n    for (let i = 0; i < data.length; i++) {\n      const series = data[i];\n      if (series.type !== 'docs') {\n        continue;\n      }\n\n      // only look at 100 docs\n      const maxDocs = Math.min(series.datapoints.length, 100);\n      for (let y = 0; y < maxDocs; y++) {\n        const doc = series.datapoints[y];\n        const flattened = flatten(doc, null);\n        for (const propName in flattened) {\n          names[propName] = true;\n        }\n      }\n    }\n\n    return _.map(names, (value, key) => {\n      return { text: key, value: key };\n    });\n  },\n  transform: (data, panel, model) => {\n    let i, y, z;\n\n    for (const column of panel.columns) {\n      const tableCol = { text: column.text };\n\n      // if filterable data then set columns to filterable\n      if (data.length > 0 && data[0].filterable) {\n        tableCol.filterable = true;\n      }\n\n      model.columns.push(tableCol);\n    }\n\n    if (model.columns.length === 0) {\n      model.columns.push({ text: 'JSON' });\n    }\n\n    for (i = 0; i < data.length; i++) {\n      const series = data[i];\n\n      for (y = 0; y < series.datapoints.length; y++) {\n        const dp = series.datapoints[y];\n        const values = [];\n\n        if (_.isObject(dp) && panel.columns.length > 0) {\n          const flattened = flatten(dp, null);\n          for (z = 0; z < panel.columns.length; z++) {\n            values.push(flattened[panel.columns[z].value]);\n          }\n        } else {\n          values.push(JSON.stringify(dp));\n        }\n\n        model.rows.push(values);\n      }\n    }\n  },\n};\n\nfunction transformDataToTable(data, panel) {\n  const model = new TableModel();\n\n  if (!data || data.length === 0) {\n    return model;\n  }\n\n  const transformer = transformers[panel.transform];\n  if (!transformer) {\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\n  }\n\n  transformer.transform(data, panel, model);\n  return model;\n}\n\nexport { transformers, transformDataToTable };\n"]}